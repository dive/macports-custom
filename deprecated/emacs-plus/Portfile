# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                emacs-plus
categories          editors aqua
license             GPL-3+
maintainers         @dive openmaintainer
description         The GNU Emacs text editor
long_description    Emacs is the advanced, extensible, customizable, self-documenting editor.

platforms           darwin
homepage            https://www.gnu.org/software/emacs/emacs.html

PortGroup           github 1.0
github.setup        emacs-mirror emacs 38c35bf0f6a938001dfecbe439addf8fb62897c6
epoch               0
version             20221229
master_sites        ${github.master_sites}

checksums \
    rmd160  09df56580b9c53d43b17159b10b6b6df08b445af \
    sha256  1b1faea52bdfe7a7248cd30a9224402e3f8cdd7bb64c51578f4775f146a959ff \
    size    46897441

universal_variant   no

use_autoreconf      yes
autoreconf.cmd      ./autogen.sh
autoreconf.args     all

depends_build \
    port:autoconf \
    port:automake \
    port:libtool \
    port:pkgconfig \
    port:texinfo

configure.args  \
    --with-ns \
    --with-gnutls \
    --with-libgmp \
    --with-json \
    --with-xml2 \
    --with-modules \
    --with-lcms2 \
    --with-rsvg \
    --with-sqlite3 \
    --with-webp \
    --without-harfbuzz \
    --disable-silent-rules \
    --infodir ${prefix}/share/info/${name}

depends_lib \
    port:gmp \
    path:lib/pkgconfig/gnutls.pc:gnutls \
    port:jansson \
    port:libxml2 \
    port:ncurses \
    port:sqlite3 \
    port:webp \
    port:lcms2

# Variants

variant nativecomp description {Builds Emacs with native compilation support and enabled AOT} {
    set gcc_v                      12
    depends_lib-append             port:gcc${gcc_v}
    configure.args-append          --with-native-compilation=aot
    compiler.cpath-prepend         ${prefix}/include/gcc${gcc_v}
    compiler.library_path-prepend  ${prefix}/lib/gcc${gcc_v}
    configure.ldflags-append       "-Wl,-rpath ${prefix}/lib/gcc${gcc_v}"
}
default_variants-append +nativecomp

variant treesitter description {Builds Emacs with tree-sitter support and embed available modules} {
    depends_build-append           port:git
    depends_lib-append             port:tree-sitter
    configure.args-append          --with-tree-sitter
}
default_variants-append +treesitter

# Phases

destroot.destdir {}
post-destroot {
    set app_name "EmacsPlus.app"; # To avoid conflicts with MacPorts official packages
    move ${worksrcpath}/nextstep/Emacs.app ${destroot}${applications_dir}/${app_name}

    set site_lisp ${destroot}${applications_dir}/${app_name}/Contents/Resources/site-lisp
    xinstall -d ${site_lisp}
    file copy ${filespath}/site-start.el ${site_lisp}
    reinplace "s|__PREFIX__|${prefix}|g" ${site_lisp}/site-start.el
}

pre-install {
    if {[variant_isset treesitter]} {
        global tspath tsdylibpath
        set tspath ${workpath}/tree-sitter-modules
        xinstall -d ${tspath}
        set tsdylibpath ${tspath}/dist
        xinstall -d ${tsdylibpath}

        proc prepare-dylib {repo_url lang_name {src_prefix .}} {
            global prefix tspath tsdylibpath
            set module_name "tree-sitter-${lang_name}"
            set module_path ${tspath}/${module_name}
            set src_dir ${module_path}/${src_prefix}/src

            set repo_exists [file exists ${module_path}]
            if {${repo_exists} != 1} {
                system -W ${tspath} "${prefix}/bin/git clone --depth=1 --quiet ${repo_url} ${module_path}"
            }

            file copy ${module_path}/${src_prefix}/grammar.js ${src_dir}
            system -W ${src_dir} "cc -fPIC -c -I. parser.c"

            if [file exists ${src_dir}/scanner.c] {
                system -W ${src_dir} "cc -fPIC -c -I. scanner.c"
            } elseif [file exists ${src_dir}/scanner.cc] {
                system -W ${src_dir} "c++ -fPIC -I. -c scanner.cc"
            }

            if [file exists ${src_dir}/scanner.cc] {
                system -W ${src_dir} "c++ -fPIC -shared *.o -o libtree-sitter-${lang_name}.dylib"
            } else {
                system -W ${src_dir} "cc -fPIC -shared *.o -o libtree-sitter-${lang_name}.dylib"
            }

            copy ${src_dir}/libtree-sitter-${lang_name}.dylib ${tsdylibpath}
        }

        # Check https://tree-sitter.github.io/tree-sitter/ for available languages
        prepare-dylib "https://github.com/WhatsApp/tree-sitter-erlang/"       erlang
        prepare-dylib "https://github.com/Wilfred/tree-sitter-elisp"          elisp
        prepare-dylib "https://github.com/ikatyang/tree-sitter-markdown"      markdown
        prepare-dylib "https://github.com/ikatyang/tree-sitter-yaml"          yaml
        prepare-dylib "https://github.com/milisims/tree-sitter-org"           org
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-bash"       bash
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-c"          c
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-c-sharp"    c-sharp
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-cpp"        cpp
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-css"        css
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-go"         go
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-html"       html
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-java"       java
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-javascript" javascript
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-json"       json
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-php"        php
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-python"     python
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-ruby"       ruby
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-rust"       rust
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-scala"      scala
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-swift"      swift
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-typescript" typescript typescript
        prepare-dylib "https://github.com/tree-sitter/tree-sitter-typescript" tsx        tsx

        set modules_dest ${destroot}${prefix}/share/emacs/tree-sitter-modules
        xinstall -d ${modules_dest}
        xinstall {*}[glob ${tsdylibpath}/*.dylib] ${modules_dest}
    }
}
